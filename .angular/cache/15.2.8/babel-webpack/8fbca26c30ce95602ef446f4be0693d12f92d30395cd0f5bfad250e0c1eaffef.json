{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\n//import { AlertyfyService } from 'src/app/services/alertyfy.service';\nlet UserRegisterComponent = class UserRegisterComponent {\n  constructor(fb, userService) {\n    this.fb = fb;\n    this.userService = userService;\n  }\n  ngOnInit() {\n    this.createRegistraionForm();\n  }\n  /*Validation using FormBuilder */\n  createRegistraionForm() {\n    this.registrationForm = this.fb.group({\n      userName: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n      password: [null, [Validators.required, Validators.minLength(8)]],\n      confirmPassword: [null, Validators.required],\n      mobile: [null, [Validators.required, Validators.maxLength(10)]]\n    }, {\n      Validators: this.passwordMatchingValidator\n    });\n  }\n  passwordMatchingValidator(fg) {\n    var _a, _b;\n    return ((_a = fg.get('password')) === null || _a === void 0 ? void 0 : _a.value) === ((_b = fg.get('confirmPassword')) === null || _b === void 0 ? void 0 : _b.value) ? false : {\n      notmatched: true\n    };\n  }\n  get userName() {\n    return this.registrationForm.get('userName');\n  }\n  get email() {\n    return this.registrationForm.get('email');\n  }\n  get password() {\n    return this.registrationForm.get('password');\n  }\n  get confirmPassword() {\n    return this.registrationForm.get('confirmPassword');\n  }\n  get mobile() {\n    return this.registrationForm.get('mobile');\n  }\n  onSubmit() {\n    console.log(this.registrationForm.value);\n    this.userSubmitted = true;\n    /* Values stored in Local storage */\n    if (this.registrationForm.valid) {\n      //this.user = Object.assign(this.user, this.registrationForm.value);  // save data in localstorage using object\n      this.userService.addUSer(this.userData());\n      this.registrationForm.reset();\n      this.userSubmitted = false;\n      //this.alertyfyService.success(\"User is saved successfully\");\n      alert(\"User is saved successfully\");\n    } else {\n      //  this.alertyfyService.error(\"Kindly provide required field\");\n      alert(\"Kindly provide required field\");\n    }\n  }\n  userData() {\n    return this.user = {\n      userName: this.userName.value,\n      email: this.email.value,\n      password: this.password.value,\n      mobile: this.mobile.value\n    };\n  }\n};\nUserRegisterComponent = __decorate([Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})], UserRegisterComponent);\nexport { UserRegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAA8CC,UAAU,QAAQ,gBAAgB;AAGhF;AAOO,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAOhCC,YAAoBC,EAAe,EACfC,WAAwB;IADxB,OAAE,GAAFD,EAAE;IACF,gBAAW,GAAXC,WAAW;EAAe;EAE9CC,QAAQ;IACR,IAAI,CAACC,qBAAqB,EAAE;EAC5B;EAEA;EACAA,qBAAqB;IACnB,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACpCC,QAAQ,EAAE,CAAC,IAAI,EAAET,UAAU,CAACU,QAAQ,CAAC;MACrCC,KAAK,EAAG,CAAC,IAAI,EAAE,CAACX,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,KAAK,CAAC,CAAC;MACvDC,QAAQ,EAAG,CAAC,IAAI,EAAE,CAACZ,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACjEC,eAAe,EAAE,CAAC,IAAI,EAAEd,UAAU,CAACU,QAAQ,CAAC;MAC5CK,MAAM,EAAG,CAAC,IAAI,EAAE,CAACf,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACgB,SAAS,CAAC,EAAE,CAAC,CAAC;KAChE,EAAE;MAAChB,UAAU,EAAE,IAAI,CAACiB;IAAyB,CAAC,CAAC;EAClD;EAEQA,yBAAyB,CAACC,EAAa;;IAC7C,OAAO,SAAE,CAACC,GAAG,CAAC,UAAU,CAAC,0CAAEC,KAAK,OAAK,QAAE,CAACD,GAAG,CAAC,iBAAiB,CAAC,0CAAEC,KAAK,IAAG,KAAK,GAC7E;MAACC,UAAU,EAAG;IAAI,CAAC;EACrB;EAEA,IAAIZ,QAAQ;IACV,OAAO,IAAI,CAACF,gBAAgB,CAACY,GAAG,CAAC,UAAU,CAAgB;EAC7D;EACA,IAAIR,KAAK;IACP,OAAO,IAAI,CAACJ,gBAAgB,CAACY,GAAG,CAAC,OAAO,CAAgB;EAC1D;EAEA,IAAIP,QAAQ;IACV,OAAO,IAAI,CAACL,gBAAgB,CAACY,GAAG,CAAC,UAAU,CAAgB;EAC7D;EAEA,IAAIL,eAAe;IACjB,OAAO,IAAI,CAACP,gBAAgB,CAACY,GAAG,CAAC,iBAAiB,CAAgB;EACpE;EAEA,IAAIJ,MAAM;IACR,OAAO,IAAI,CAACR,gBAAgB,CAACY,GAAG,CAAC,QAAQ,CAAgB;EAC3D;EAEAG,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,gBAAgB,CAACa,KAAK,CAAC;IACxC,IAAI,CAACK,aAAa,GAAG,IAAI;IACzB;IACA,IAAG,IAAI,CAAClB,gBAAgB,CAACmB,KAAK,EAAC;MAC/B;MACA,IAAI,CAACtB,WAAW,CAACuB,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAE,CAAC;MACzC,IAAI,CAACrB,gBAAgB,CAACsB,KAAK,EAAE;MAC7B,IAAI,CAACJ,aAAa,GAAG,KAAK;MAC1B;MACAK,KAAK,CAAC,4BAA4B,CAAC;KAClC,MACI;MACL;MACAA,KAAK,CAAC,+BAA+B,CAAC;;EAExC;EAEAF,QAAQ;IACN,OAAO,IAAI,CAACG,IAAI,GAAG;MACjBtB,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACW,KAAK;MAC7BT,KAAK,EAAE,IAAI,CAACA,KAAK,CAACS,KAAK;MACvBR,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACQ,KAAK;MAC7BL,MAAM,EAAE,IAAI,CAACA,MAAM,CAACK;KACrB;EACH;CAED;AA5EYnB,qBAAqB,eALjCF,SAAS,CAAC;EACTiC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWjC,qBAAqB,CA4EjC;SA5EYA,qBAAqB","names":["Component","Validators","UserRegisterComponent","constructor","fb","userService","ngOnInit","createRegistraionForm","registrationForm","group","userName","required","email","password","minLength","confirmPassword","mobile","maxLength","passwordMatchingValidator","fg","get","value","notmatched","onSubmit","console","log","userSubmitted","valid","addUSer","userData","reset","alert","user","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\AmolP\\SCM_ANGULAR\\HealthIssue-Manager\\src\\app\\user\\user-register\\user-register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from 'src/app/model/user';\nimport { UserService } from 'src/app/services/user.service';\n//import { AlertyfyService } from 'src/app/services/alertyfy.service';\n\n@Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})\nexport class UserRegisterComponent implements OnInit {\n\n  registrationForm!: FormGroup;\n\n  /* Local Storage */\n  user!: User;\n  userSubmitted: boolean | undefined;\n  constructor(private fb: FormBuilder,\n              private userService: UserService){}\n\n  ngOnInit() {\n  this.createRegistraionForm();\n  }\n\n  /*Validation using FormBuilder */\n  createRegistraionForm() {\n    this.registrationForm = this.fb.group({\n      userName: [null, Validators.required],\n      email : [null, [Validators.required, Validators.email]],\n      password : [null, [Validators.required, Validators.minLength(8)]],\n      confirmPassword :[null, Validators.required],\n      mobile : [null, [Validators.required, Validators.maxLength(10)]],\n    }, {Validators: this.passwordMatchingValidator});\n  }\n\n  private passwordMatchingValidator(fg: FormGroup) {\n    return fg.get('password')?.value === fg.get('confirmPassword')?.value ? false :\n    {notmatched : true};\n  }\n\n  get userName(){\n    return this.registrationForm.get('userName') as FormControl;\n  }\n  get email(){\n    return this.registrationForm.get('email') as FormControl;\n  }\n\n  get password(){\n    return this.registrationForm.get('password') as FormControl;\n  }\n\n  get confirmPassword(){\n    return this.registrationForm.get('confirmPassword') as FormControl;\n  }\n\n  get mobile(){\n    return this.registrationForm.get('mobile') as FormControl;\n  }\n\n  onSubmit(){\n    console.log(this.registrationForm.value);\n    this.userSubmitted = true;\n    /* Values stored in Local storage */\n    if(this.registrationForm.valid){\n    //this.user = Object.assign(this.user, this.registrationForm.value);  // save data in localstorage using object\n    this.userService.addUSer(this.userData())\n    this.registrationForm.reset();\n    this.userSubmitted = false;\n    //this.alertyfyService.success(\"User is saved successfully\");\n    alert(\"User is saved successfully\")\n    }\n    else {\n    //  this.alertyfyService.error(\"Kindly provide required field\");\n    alert(\"Kindly provide required field\")\n    }\n  }\n\n  userData(): User {\n    return this.user = {\n      userName: this.userName.value,\n      email: this.email.value,\n      password: this.password.value,\n      mobile: this.mobile.value\n    }\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}