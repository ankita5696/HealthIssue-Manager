{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/user.service\";\n//import { AlertyfyService } from 'src/app/services/alertyfy.service';\nexport class UserRegisterComponent {\n  constructor(fb, userService) {\n    this.fb = fb;\n    this.userService = userService;\n  }\n  ngOnInit() {\n    /* Validation using FormControl */\n    //  this.registrationForm = new FormGroup({\n    //   userName : new FormControl (\"\",Validators.required),\n    //   email : new FormControl(null, [Validators.required, Validators.email]),\n    //   password : new FormControl(null, [Validators.required, Validators.minLength(8)]),\n    //   confirmPassword : new FormControl(null, [Validators.required]),\n    //   mobile : new FormControl(null, [Validators.required,Validators.minLength(10), Validators.maxLength(10)]),\n    //  });\n    this.createRegistraionForm();\n  }\n  /*Validation using FormBuilder */\n  createRegistraionForm() {\n    this.registrationForm = this.fb.group({\n      userName: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n      password: [null, [Validators.required, Validators.minLength(8)]],\n      confirmPassword: [null, Validators.required],\n      mobile: [null, [Validators.required, Validators.maxLength(10)]]\n    }, {\n      Validators: this.passwordMatchingValidator\n    });\n  }\n  passwordMatchingValidator(fg) {\n    var _a, _b;\n    return ((_a = fg.get('password')) === null || _a === void 0 ? void 0 : _a.value) === ((_b = fg.get('confirmPassword')) === null || _b === void 0 ? void 0 : _b.value) ? false : {\n      notmatched: true\n    };\n  }\n  get userName() {\n    return this.registrationForm.get('userName');\n  }\n  get email() {\n    return this.registrationForm.get('email');\n  }\n  get password() {\n    return this.registrationForm.get('password');\n  }\n  get confirmPassword() {\n    return this.registrationForm.get('confirmPassword');\n  }\n  get mobile() {\n    return this.registrationForm.get('mobile');\n  }\n  onSubmit() {\n    console.log(this.registrationForm.value);\n    this.userSubmitted = true;\n    /* Values stored in Local storage */\n    if (this.registrationForm.valid) {\n      //this.user = Object.assign(this.user, this.registrationForm.value);  // save data in localstorage using object\n      this.userService.addUSer(this.userData());\n      this.registrationForm.reset();\n      this.userSubmitted = false;\n      //this.alertyfyService.success(\"User is saved successfully\");\n      alert(\"User is saved successfully\");\n    } else {\n      //  this.alertyfyService.error(\"Kindly provide required field\");\n      alert(\"Kindly provide required field\");\n    }\n  }\n  userData() {\n    return this.user = {\n      userName: this.userName.value,\n      email: this.email.value,\n      password: this.password.value,\n      mobile: this.mobile.value\n    };\n  }\n}\nUserRegisterComponent.ɵfac = function UserRegisterComponent_Factory(t) {\n  return new (t || UserRegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService));\n};\nUserRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserRegisterComponent,\n  selectors: [[\"app-user-register\"]],\n  decls: 6,\n  vars: 0,\n  consts: [[1, \"row\"], [1, \"col-6\", \"m-auto\"], [1, \"card\", \"m-auto\"], [1, \"card-header\"], [1, \"card-body\"]],\n  template: function UserRegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵtext(4, \" Register \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"div\", 4);\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","UserRegisterComponent","constructor","fb","userService","ngOnInit","createRegistraionForm","registrationForm","group","userName","required","email","password","minLength","confirmPassword","mobile","maxLength","passwordMatchingValidator","fg","get","value","notmatched","onSubmit","console","log","userSubmitted","valid","addUSer","userData","reset","alert","user","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\AmolP\\SCM_ANGULAR\\HealthIssue-Manager\\src\\app\\user\\user-register\\user-register.component.ts","C:\\AmolP\\SCM_ANGULAR\\HealthIssue-Manager\\src\\app\\user\\user-register\\user-register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from 'src/app/model/user';\nimport { UserService } from 'src/app/services/user.service';\n//import { AlertyfyService } from 'src/app/services/alertyfy.service';\n\n@Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})\nexport class UserRegisterComponent implements OnInit {\n\n  registrationForm!: FormGroup;\n\n  /* Local Storage */\n  user!: User;\n  userSubmitted: boolean | undefined;\n  constructor(private fb: FormBuilder,\n              private userService: UserService){}\n\n  ngOnInit() {\n  /* Validation using FormControl */\n  //  this.registrationForm = new FormGroup({\n  //   userName : new FormControl (\"\",Validators.required),\n  //   email : new FormControl(null, [Validators.required, Validators.email]),\n  //   password : new FormControl(null, [Validators.required, Validators.minLength(8)]),\n  //   confirmPassword : new FormControl(null, [Validators.required]),\n  //   mobile : new FormControl(null, [Validators.required,Validators.minLength(10), Validators.maxLength(10)]),\n  //  });\n  this.createRegistraionForm();\n  }\n\n  /*Validation using FormBuilder */\n  createRegistraionForm() {\n    this.registrationForm = this.fb.group({\n      userName: [null, Validators.required],\n      email : [null, [Validators.required, Validators.email]],\n      password : [null, [Validators.required, Validators.minLength(8)]],\n      confirmPassword :[null, Validators.required],\n      mobile : [null, [Validators.required, Validators.maxLength(10)]],\n    }, {Validators: this.passwordMatchingValidator});\n  }\n\n  private passwordMatchingValidator(fg: FormGroup) {\n    return fg.get('password')?.value === fg.get('confirmPassword')?.value ? false :\n    {notmatched : true};\n  }\n\n  get userName(){\n    return this.registrationForm.get('userName') as FormControl;\n  }\n  get email(){\n    return this.registrationForm.get('email') as FormControl;\n  }\n\n  get password(){\n    return this.registrationForm.get('password') as FormControl;\n  }\n\n  get confirmPassword(){\n    return this.registrationForm.get('confirmPassword') as FormControl;\n  }\n\n  get mobile(){\n    return this.registrationForm.get('mobile') as FormControl;\n  }\n\n  onSubmit(){\n    console.log(this.registrationForm.value);\n    this.userSubmitted = true;\n    /* Values stored in Local storage */\n    if(this.registrationForm.valid){\n    //this.user = Object.assign(this.user, this.registrationForm.value);  // save data in localstorage using object\n    this.userService.addUSer(this.userData())\n    this.registrationForm.reset();\n    this.userSubmitted = false;\n    //this.alertyfyService.success(\"User is saved successfully\");\n    alert(\"User is saved successfully\")\n    }\n    else {\n    //  this.alertyfyService.error(\"Kindly provide required field\");\n    alert(\"Kindly provide required field\")\n    }\n  }\n\n  userData(): User {\n    return this.user = {\n      userName: this.userName.value,\n      email: this.email.value,\n      password: this.password.value,\n      mobile: this.mobile.value\n    }\n  }\n\n}\n\n","<div class=\"row\">\n  <div class=\"col-6 m-auto\">\n  <div class=\"card m-auto\">\n    <div class=\"card-header\">\n      Register\n    </div>\n    <div class=\"card-body\">\n      <!-- <form [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group col-12\">\n            <label for=\"name\" class=\"form-label\">Name</label>\n            <input type=\"text\" class=\"form-control\" formControlName=\"userName\">\n            <span *ngIf=\"!userName?.valid && (userName?.touched || userSubmitted)\" class=\"error-block\">Please provide Name</span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"email\" class=\"form-label\">Email</label>\n          <input type=\"text\" class=\"form-control\" formControlName=\"email\" >\n          <span *ngIf=\"!email.valid && (email.touched || userSubmitted)\" class=\"error-block\">\n            <span *ngif=\"email?.hasError('required')\">\n              Please provide Email id\n            </span>\n            <span *ngif=\"email?.hasError('email')\">\n              Please provide valid Email id\n            </span>\n          </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"passwrod\" class=\"form-label\">Password</label>\n          <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n          <span *ngIf=\"!password.valid && (password.touched || userSubmitted)\" class=\"error-block\">\n            <span *ngIf=\"password?.hasError('required')\">\n              Please provide password\n            </span>\n            <span *ngIf=\"password?.hasError('minlength(8)')\">\n              Password should not be leser then 8character\n            </span>\n          </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"cpassword\" class=\"form-label\">Confirm Password</label>\n          <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\">\n          <span *ngIf=\"!confirmPassword.valid && (confirmPassword.touched || userSubmitted)\" class=\"error-block\">\n            <span *ngIf=\"confirmPassword?.hasError('required')\">\n              Please confirm password\n            </span>\n          </span>\n          <span *ngIf=\"registrationForm.hasError('notmatched') && confirmPassword.valid\">\n            Password not matched\n          </span>\n        </div>\n\n        <div class=\"form-group col-12\">\n          <label for=\"mobile\" class=\"form-label\">Mobile</label>\n          <input type=\"text\" class=\"form-control\" formControlName=\"mobile\">\n          <span *ngIf=\"!mobile.valid && (mobile.touched || userSubmitted)\" class=\"error-block\">\n            <span *ngIf=\"mobile?.hasError('required')\">\n              Please provide mobile number\n            </span>\n          </span>\n        </div>\n        <br>\n        <div class=\"form-group col-12\">\n          <button type=\"submit\" class=\"btn btn-primary\">Save</button>&nbsp;\n          <button type=\"reset\" class=\"btn btn-secondary ml-2\">Cancel</button>\n        </div>\n      </form> -->\n    </div>\n  </div>\n  </div>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}